<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
	
	<parent>
	    <groupId>it.myst.test.soap</groupId>
	    <artifactId>springBoot-SOAP-client-server</artifactId>
	    <version>0.0.1-SNAPSHOT</version>
	</parent>
  
<!--     <groupId>it.myst.test.soap</groupId> -->
    <artifactId>springBoot-SOAP-server</artifactId>
    <version>1.0-SNAPSHOT</version>
    
    <!-- caso jar deployment -->
<!--     <packaging>jar</packaging> -->
    
    <!-- caso war deployment -->
    <packaging>war</packaging>
	<properties>
	      <start-class>it.myst.test.soap.documento.config.SpringBootWebApplicationWar</start-class>
	</properties>
	<!-- caso war deployment END -->

    <dependencies>
    
    	<!-- caso war deployment -->
    	<!-- To build a war file that is both executable and deployable into an external container -->
    	<!-- we need to mark the embedded container dependencies as "provided" and packaging "war", e.g: -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- caso war deployment END -->
        

        <!-- Spring WS dependencies: -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-ws</artifactId>
        </dependency>
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
    	<finalName>springBoot-SOAP-server</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Conversion: xsd to java -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <id>xjc</id>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
<!--                    deprecated in 2.x: <schemaDirectory>${project.basedir}/src/main/resources/</schemaDirectory> -->
<!--                    You should never generate to your source folder, but to target/generated-sources/xjc. 
						Generated code should not be version-controlled and can be deleted at any-time since it will be regenerated anyway.
						Generated code should always be located under target, the build directory of Maven. The jaxb2-maven-plugin will generate classes by default under target/generated-sources/jaxb and there's really no reason to change that. 
						<outputDirectory>${project.basedir}/src/main/java/</outputDirectory> -->
                    <outputDirectory>${project.basedir}/generated-sources/java/</outputDirectory>
                    <clearOutputDir>true</clearOutputDir>
                     <!-- Indicate that we should use DTD input instead of XSDs -->
	                <sourceType>XmlSchema</sourceType>
	
	                <!-- Define the directory where we should find the DTD files -->
	                <sources>
	                    <source>${project.basedir}/src/main/resources/xsd/documentoSchema.xsd</source>
					    <source>${project.basedir}/src/main/resources/xsd/directory-xsds</source>
	                </sources>
                </configuration>
            </plugin>
            
	      	<plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>build-helper-maven-plugin</artifactId>
<!-- 		        <version>3.0.0</version> -->
		        <executions>
		          <execution>
		            <id>add-source</id>
		            <phase>generate-sources</phase>
		            <goals>
		              <goal>add-source</goal>
		            </goals>
		            <configuration>
		              <sources>
<!-- 		            if in target dir, use that:  	<source>${project.build.directory}/generated-sources/java/</source> -->
		              	<source>${project.basedir}/generated-sources/java/</source>
		              </sources>
		            </configuration>
		          </execution>
		        </executions>
	      	</plugin>
			
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <configuration>
			        <compilerArguments>
			            <source>1.8</source>
			            <target>1.8</target>
			        </compilerArguments>
			    </configuration>
			</plugin>

        </plugins>
    </build>


</project>